<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++11特性</title>
      <link href="/2022/02/25/c++11/"/>
      <url>/2022/02/25/c++11/</url>
      
        <content type="html"><![CDATA[<p>c++11增添了很多新特性，主要表现在如下几个方面：</p><ul><li>提高运行效率的语言特性：右值引用、泛化常量表达式</li><li>原有语法的增强：初始化列表、统⼀的初始化语法、类型推导、范围for循环、Lambda表达式、final和override、构造函数委托</li><li>语言能力的提升：空指针nullptr、default和delete、⻓整数、静态assert</li><li>c++标准库的更新：智能指针、正则表达式、哈希表等</li></ul><span id="more"></span><h1 id="提高运行效率"><a href="#提高运行效率" class="headerlink" title="提高运行效率"></a>提高运行效率</h1><h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><h2 id="泛化常量表达式"><a href="#泛化常量表达式" class="headerlink" title="泛化常量表达式"></a>泛化常量表达式</h2><h1 id="原有语法的增强"><a href="#原有语法的增强" class="headerlink" title="原有语法的增强"></a>原有语法的增强</h1><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><h2 id="统一的初始化语法"><a href="#统一的初始化语法" class="headerlink" title="统一的初始化语法"></a>统一的初始化语法</h2><h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><h2 id="范围for循环"><a href="#范围for循环" class="headerlink" title="范围for循环"></a>范围for循环</h2><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><h2 id="final和overri"><a href="#final和overri" class="headerlink" title="final和overri"></a>final和overri</h2><h2 id="构造函数委托"><a href="#构造函数委托" class="headerlink" title="构造函数委托"></a>构造函数委托</h2><h1 id="语言能力提升"><a href="#语言能力提升" class="headerlink" title="语言能力提升"></a>语言能力提升</h1><h2 id="空指针nullptr"><a href="#空指针nullptr" class="headerlink" title="空指针nullptr"></a>空指针nullptr</h2><h2 id="default和delete"><a href="#default和delete" class="headerlink" title="default和delete"></a>default和delete</h2><h2 id="长整数"><a href="#长整数" class="headerlink" title="长整数"></a>长整数</h2><h2 id="静态assert"><a href="#静态assert" class="headerlink" title="静态assert"></a>静态assert</h2><h1 id="c-标准库更新"><a href="#c-标准库更新" class="headerlink" title="c++标准库更新"></a>c++标准库更新</h1><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2>]]></content>
      
      
      <categories>
          
          <category> 小黎与C++的互相拉扯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x&amp;(x-1)的使用</title>
      <link href="/2022/02/25/x&amp;(x-1)/"/>
      <url>/2022/02/25/x&amp;(x-1)/</url>
      
        <content type="html"><![CDATA[<p>刷题刷到了这玩意，浅浅总结一哈</p><span id="more"></span><h1 id="将x转为二进制，计算1的数目"><a href="#将x转为二进制，计算1的数目" class="headerlink" title="将x转为二进制，计算1的数目"></a>将x转为二进制，计算1的数目</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        x = x &amp; (x - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每执行一次<code>x = x &amp; (x-1)</code>，会将<code>x</code>用二进制表示时最右边的一个1变为0，因为<code>x-1</code>会将该二进制最右边的一个1变为0。</p><h1 id="判断数x是否为2的次方数"><a href="#判断数x是否为2的次方数" class="headerlink" title="判断数x是否为2的次方数"></a>判断数x是否为2的次方数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  x &amp;&amp; (x &amp; (x - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理同上，此外要注意<code>==</code>的优先级高于<code>&amp;</code>，且<code>x</code>不能为0。</p>]]></content>
      
      
      <categories>
          
          <category> 小黎和二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与运算 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
